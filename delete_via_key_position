
#include<bits/stdc++.h>
using namespace std;
struct node
{
	int data;
	struct node* next;

};

void printList(struct node* node)
{
	while(node!=NULL)
	{
		cout<<node->data<<"-> ";
		node=node->next;
	}
	cout<<"NULL\n";
}

void append(struct node** head_ref,int new_data)
{
	struct node* new_node=(struct node*)malloc(sizeof(struct node));
	new_node->data=new_data;
	new_node->next=NULL;
	struct node* last=*head_ref;
	if(*head_ref==NULL)
	{
		*head_ref=new_node;
		return;
	}
	while(last->next!=NULL)
	{
		last=last->next;

	}
	last->next=new_node;
	return;
}


void delete_pos(struct node** head,int pos)
{
	struct node* temp=*head;
	if(*head==NULL)return;
	if(pos==0)
	{
		*head=temp->next;
		free(temp);
		return;
	}
	for(int i=0;temp!=NULL && i<pos-1;i++)
	{
		temp=temp->next;
	}
	if(temp==NULL || temp->next==NULL)return;
	struct node* nod=temp->next->next;
	free(temp->next);
	temp->next=nod;
}

void delete_key(struct node** head,int key)
{
	struct node* temp=*head,*prev;
	if(temp!=NULL && temp->data==key)
	{
		*head=temp->next;
		free(temp);
		return;
	}
	while(temp!=NULL && temp->data!=key)
	{
		prev=temp;
		temp=temp->next;
	}
	prev->next=temp->next;
	free(temp);
	return;

}

int main()
{
	struct node* head=NULL;
	append(&head,1);
	append(&head,2);
	append(&head,3);
	append(&head,4);
		
  delete_key(&head,2);
	delete_pos(&head,2);

	
	printList(head);
}
